name: CI checks

on:
  pull_request:
    types: [synchronize, opened, reopened, ready_for_review]
  push:
    branches:
      - main

## `actions-rs/toolchain@v1` overwrite set to false so that
## `rust-toolchain` is always used and the only source of truth.

jobs:

  consecutiveness:
    if: github.event.pull_request.draft == false && github.repository == 'privacy-scaling-explorations/zkevm-circuits'

    runs-on: ubuntu-latest
    steps:
    - uses: mktcode/consecutive-workflow-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

  wakeuprunner:
    if: github.event.pull_request.draft == false && github.repository == 'privacy-scaling-explorations/zkevm-circuits'

    needs: [consecutiveness]
    name: Wake up self-hosted runner
    runs-on: pse-runner

    steps:
      - uses: actions/checkout@v2
      - run: |
          .github/ciChecksScripts/wakeUpRunner.sh

  test:
    if: github.event.pull_request.draft == false && github.repository == 'privacy-scaling-explorations/zkevm-circuits'

    needs: [wakeuprunner]
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # We don't need to test across multiple platforms yet
        # os: [ubuntu-latest, windows-latest, macOS-latest]
        os: [ci-checks-runner]

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          override: false
      - name: Setup golang
        uses: actions/setup-go@v3
        with:
          go-version: ~1.18
      # Go cache for building geth-utils
      - name: Go cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Run light tests # light tests are run in parallel
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose --release --all --all-features --exclude integration-tests --exclude circuit-benchmarks
      - name: Run heavy tests # heavy tests are run serially to avoid OOM
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose --release --all --all-features --exclude integration-tests --exclude circuit-benchmarks serial_ -- --ignored --test-threads 1

  test_forks:
    if: github.event.pull_request.draft == false && github.repository != 'privacy-scaling-explorations/zkevm-circuits'

    name: Test_forks
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # We don't need to test across multiple platforms yet
        # os: [ubuntu-latest, windows-latest, macOS-latest]
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          override: false
      - name: Setup golang
        uses: actions/setup-go@v3
        with:
          go-version: ~1.18
      # Go cache for building geth-utils
      - name: Go cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Run light tests # light tests are run in parallel
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose --release --all --all-features --exclude integration-tests --exclude circuit-benchmarks
      - name: Run heavy tests # heavy tests are run serially to avoid OOM
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose --release --all --all-features --exclude integration-tests --exclude circuit-benchmarks serial_ -- --ignored --test-threads 1

  build:
    if: github.event.pull_request.draft == false

    name: Build target ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - wasm32-unknown-unknown
          - wasm32-wasi

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          override: false
      - name: Add target
        run: rustup target add ${{ matrix.target }}
      # Go cache for building geth-utils
      - name: Go cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-features
      # Make sure benchmarks compile.
      - name: cargo build benchmarks no-run
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose --release --all-features -p circuit-benchmarks --no-run

  bitrot:
    if: github.event.pull_request.draft == false

    name: Bitrot check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          override: false
      # Go cache for building geth-utils
      - name: Go cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      # Build benchmarks to prevent bitrot
      - name: Build benchmarks
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --benches --examples --all-features

  doc-links:
    if: github.event.pull_request.draft == false

    name: Intra-doc links
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          override: false
      # Go cache for building geth-utils
      - name: Go cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: cargo fetch
        uses: actions-rs/cargo@v1
        with:
          command: fetch

      # Ensure intra-documentation links all resolve correctly
      # Requires #![deny(intra_doc_link_resolution_failure)] in crates.
      - name: Check intra-doc links
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --no-deps --all --document-private-items

  fmt:
    if: github.event.pull_request.draft == false

    name: Rustfmt
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          override: false
      # Go cache for building geth-utils
      - name: Go cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all-features
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
