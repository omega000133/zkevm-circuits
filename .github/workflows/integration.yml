# Replace `trigger-integration-tests` with a label of your choice.
# A github personal access token secret `GH_PA` is required to trigger `pull_request:labeled`
# from the `add-label` step. Only requires the `Pull requests: Read and write` permission.
name: Integration Tests

on:
  pull_request_target:
    types: [synchronize, opened, reopened, ready_for_review, labeled]
  issue_comment:
    types: [created, edited]
  push:
    branches:
      - main

jobs:
  help:
    # Leaves a helpful message on a pull request.
    if: github.event_name == 'pull_request_target'
    permissions:
      issues: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            const botComment = comments.find(comment => comment.user.id === 41898282)
            if (!botComment) {
              const body = 'ðŸ‘‹ Comment on this pull request with `/test` to trigger the integration tests.'
              await github.rest.issues.createComment({
                body,
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
              })
            }

  add-label:
    # Attaches a label to the pull request to trigger the workflow again within the PR context.
    if: github.event.issue.pull_request && github.event.comment.body == '/test'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          # pull_request:labeled is only triggered if a personal access token is used
          github-token: ${{ secrets.GH_PAT }}
          script: |
            await github.rest.issues.addLabels({
              labels: ['trigger-integration-tests'],
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            })

  remove-label:
    # Removes the trigger label from the pull request.
    if: contains(github.event.pull_request.labels.*.name, 'trigger-integration-tests')
    permissions:
      issues: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.removeLabel({
              name: 'trigger-integration-tests',
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            })

  consecutiveness:
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'trigger-integration-tests')

    runs-on: ubuntu-latest
    steps:
    - uses: mktcode/consecutive-workflow-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

  wakeuprunner:
    needs: [consecutiveness]
    name: Wake up self-hosted runner
    runs-on: pse-runner

    steps:
      - uses: actions/checkout@v2
      - run: |
          .github/integrationTestsScripts/wakeUpRunner.sh

  integration-tests:
    needs: [wakeuprunner]
    name: Integration Tests
    runs-on: integration-tests-runner

    defaults:
      run:
        working-directory: ./integration-tests
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ (github.event.pull_request && format('refs/pull/{0}/head', github.event.pull_request.number)) || github.ref }}
      - uses: actions-rs/toolchain@v1
        with:
          override: false
      - name: Setup golang
        uses: actions/setup-go@v3
        with:
          go-version: ~1.18
      # Go cache for building geth-utils
      - name: Go cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      # Run an initial build in a separate step to split the build time from execution time
      - name: Build bins
        run: cargo build --bin gen_blockchain_data
      - name: Build tests
        run: for testname in rpc circuit_input_builder circuits; do cargo test --profile release --test $testname --features $testname --no-run; done
      - run: ./run.sh --steps "setup"
      - run: ./run.sh --steps "gendata"
      - run: ./run.sh --steps "tests" --tests "rpc"
      - run: ./run.sh --steps "tests" --tests "circuit_input_builder"
      - run: RUST_TEST_THREADS=1 ./run.sh --steps "tests" --tests "circuits"
      - run: ./run.sh --steps "cleanup"
